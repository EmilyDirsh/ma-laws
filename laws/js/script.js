// Generated by CoffeeScript 1.6.3
(function() {
  var Routes, View, body, db, routes, start, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    _this = this;

  db = false;

  View = (function(_super) {
    __extends(View, _super);

    function View() {
      _ref = View.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    View.prototype.initialize = function() {
      this.render = this.options.render;
      this.routes = this.options.routes;
      return true;
    };

    View.prototype.events = {
      'click .bodyLink': 'movePage'
    };

    View.prototype.search = function(q) {
      var opts, path;
      path = "" + (db.id()) + "_design/laws/_search/sections";
      opts = {
        q: q,
        include_docs: true,
        limit: 200
      };
      return $.ajax(path, {
        data: opts,
        dataType: 'json'
      });
    };

    View.prototype.movePage = function(a) {
      a.preventDefault();
      return routes.navigate(a.target.id, {
        trigger: true
      });
    };

    View.prototype.spin = function(a) {
      return this.$el.spin(a);
    };

    View.prototype.template = {
      search: Mustache.compile("<div class=\"row\">\n<h1>\"{{q}}\"</h1>\n<p>{{total_rows}} results</p><dl>\n{{#rows}}\n{{#doc.section}}<dt>\n<a class='bodyLink' href='/c{{doc.chapter}}s{{doc.section}}' id=\"/c{{doc.chapter}}s{{doc.section}}\">Chapter {{doc.chapter}} Section {{doc.section}}</a>\n  		</dt>\n{{#doc.desc}}<dd><strong>{{doc.desc}}</strong></dd>{{/doc.desc}}\n{{#doc.text}}<dd>{{doc.text}}</dd>{{/doc.text}}\n{{/doc.section}}\n{{#doc.article}}<dt>\n<a class='bodyLink' href='/c{{doc.chapter}}a{{doc.article}}' id=\"/c{{doc.chapter}}a{{doc.article}}\">Chapter {{doc.chapter}} Article {{doc.article}}</a>\n  		</dt>\n{{#doc.desc}}<dd><strong>{{doc.desc}}</strong></dd>{{/doc.desc}}\n{{#doc.text}}<dd>{{doc.text}}</dd>{{/doc.text}}\n{{/doc.article}}\n{{#doc.year}}<dt>\n<a class='bodyLink' href='../y{{doc.year}}c{{doc.chapter}}' id=\"/y{{doc.year}}c{{doc.chapter}}\">Session {{doc.year}} Chapter {{doc.chapter}}</a>\n  		</dt>\n{{#doc.desc}}<dd>{{doc.desc}}</dd>{{/doc.desc}}\n{{/doc.year}}\n{{/rows}}\n</dl>\n</div>"),
      section: Mustache.compile("<div class=\"row\">\n<ul class=\"breadcrumb\">\n  			<li><a class='bodyLink' href=\"GeneralLaws\" id=\"GeneralLaws\">General Laws</a></li>\n  			<li><a class='bodyLink' href='GeneralLaws/Part{{part}}' id=\"/GeneralLaws/Part{{part}}\">Part {{part}}</a></li>\n  			<li><a class='bodyLink' href='GeneralLaws/Part{{part}}/Title{{title}}' id=\"/GeneralLaws/Part{{part}}/Title{{title}}\">Title {{title}}</a></li>\n  			<li><a class='bodyLink' href='GeneralLaws/Part{{part}}/Title{{title}}/Chapter{{chapter}}' id=\"/GeneralLaws/Part{{part}}/Title{{title}}/Chapter{{chapter}}\">Chapter {{chapter}}</a></li>\n  			<li class=\"active\">Section {{section}}</li>\n</ul>\n<h1>Chapter {{chapter}} Section {{section}}</h1>\n{{#desc}}<h2>{{desc}}</h2>{{/desc}}\n{{#text}}<p>{{text}}</p>{{/text}}\n</div>"),
      article: Mustache.compile("<div class=\"row\">\n<ul class=\"breadcrumb\">\n  			<li><a class='bodyLink' href=\"GeneralLaws\" id=\"GeneralLaws\">General Laws</a></li>\n  			<li><a class='bodyLink' href='GeneralLaws/Part{{part}}' id=\"/GeneralLaws/Part{{part}}\">Part {{part}}</a></li>\n  			<li><a class='bodyLink' href='GeneralLaws/Part{{part}}/Title{{title}}' id=\"/GeneralLaws/Part{{part}}/Title{{title}}\">Title {{title}}</a></li>\n  			<li><a class='bodyLink' href='GeneralLaws/Part{{part}}/Title{{title}}/Chapter{{chapter}}' id=\"/GeneralLaws/Part{{part}}/Title{{title}}/Chapter{{chapter}}\">Chapter {{chapter}}</a></li>\n  			<li class=\"active\">Article {{article}}</li>\n</ul>\n<h1>Chapter {{chapter}} Article {{article}}</h1>\n{{#desc}}<h2>{{desc}}</h2>{{/desc}}\n{{#text}}<p>{{text}}</p>{{/text}}\n</div>"),
      session: Mustache.compile("<div class=\"row\">\n<ul class=\"breadcrumb\">\n  			<li><a class='bodyLink' href=\"SessionLaw\" id=\"SessionLaw\">Session Laws</a></li>\n  			<li><a class='bodyLink' href=\"SessionLaw/Year{{year}}\" id=\"SessionLaw/Year{{year}}\">Year {{year}}</a></li>\n  			\n  			<li class=\"active\">Chapter {{chapter}}</li>\n</ul>\n<h1>Session {{year}} Chapter {{chapter}}</h1>\n{{#desc}}<h4>{{desc}}</h4>{{/desc}}\n{{#text}}{{{text}}}{{/text}}\n</div>"),
      chapter: Mustache.compile("<div class=\"row\">\n<ul class=\"breadcrumb\">\n  			<li><a class='bodyLink' href=\"/GeneralLaws\" id=\"GeneralLaws\">General Laws</a></li>\n  			<li><a class='bodyLink' href='/GeneralLaws/Part{{doc.part}}' id=\"GeneralLaws/Part{{pat}}\">Part {{pat}}</a></li>\n  			<li><a class='bodyLink' href='/GeneralLaws/Part{{doc.part}}/Title{{doc.title}}' id=\"GeneralLaws/Part{{pat}}/Title{{tit}}\">Title {{tit}}</a></li>\n  			<li class=\"active\">Chapter {{chap}}</li>\n</ul>\n<h1>Chapter {{chap}}</h1>\n<dl>\n{{#rows}}\n{{#doc.desc}}<dt><strong>{{doc.longCode}} {{doc.sub}}:</strong> <a class='bodyLink' href='../../../c{{doc.chapter}}{{doc.shortCode}}{{doc.sub}}' id='c{{doc.chapter}}{{doc.shortCode}}{{doc.sub}}'>{{doc.desc}}</a></dt>{{/doc.desc}}\n{{#doc.text}}<dd>{{doc.text}}</dd>{{/doc.text}}\n{{/rows}}\n</dl>\n</div>"),
      title: Mustache.compile("<div class=\"row\">\n<ul class=\"breadcrumb\">\n  			<li><a class='bodyLink' href=\"/GeneralLaws\" id=\"GeneralLaws\">General Laws</a></li>\n  			<li><a class='bodyLink' href='/GeneralLaws/Part{{tp}}' id=\"/GeneralLaws/Part{{tp}}\">Part {{tp}}</a></li>\n  			\n  			<li class=\"active\">Title {{t}}</li>\n</ul>\n<h1>Title {{t}}</h1>\n<ul>\n{{#row}}\n	<li>\n	<a class='bodyLink' href='Title{{title}}/Chapter{{chapter}}' id=\"GeneralLaws/Part{{part}}/Title{{title}}/Chapter{{chapter}}\">\n		Chapter {{chapter}}\n	</a>\n	</li>\n{{/row}}\n</ul>\n</div>"),
      year: Mustache.compile("<div class=\"row\">\n<ul class=\"breadcrumb\">\n  			<li><a class='bodyLink' href=\"/SessionLaw\" id=\"SessionLaw\">Session Laws</a></li>\n  			\n  			\n  			<li class=\"active\">Year {{year}}</li>\n</ul>\n<h1>Year {{year}}</h1>\n<ul>\n{{#rows}}{{#doc.desc}}\n	<li><h3>\n	<a class='bodyLink' href='/{{doc._id}}' id=\"{{doc._id}}\">\n		Chapter {{doc.chapter}}\n	</a></h3>\n	{{doc.desc}}\n	</li>\n	{{/doc.desc}}\n{{/rows}}\n</ul>\n</div>"),
      part: Mustache.compile("<div class=\"row\">\n<ul class=\"breadcrumb\">\n  			<li><a class='bodyLink' href=\"/GeneralLaws\" id=\"GeneralLaws\">General Laws</a></li>\n  			\n  			\n  			<li class=\"active\">Part {{p}}</li>\n</ul>\n<h1>Part {{p}}</h1>\n<ul>\n{{#rowp}}\n	<li>\n	<a class='bodyLink' href='Part{{part}}/Title{{title}}' id=\"GeneralLaws/Part{{part}}/Title{{title}}\">\n		Title {{title}}\n	</a>\n	</li>\n{{/rowp}}\n</ul>\n</div>"),
      sess: Mustache.compile("<div class=\"row\">\n<ul class=\"breadcrumb\">\n  			<li class=\"active\">Session Laws</li>\n</ul>\n<h1>Session Laws</h1>\n<ul>\n{{#rows}}\n	<li>\n	<a class='bodyLink' href='SessionLaw/Year{{year}}' id=\"SessionLaw/Year{{year}}\">\n		Year {{year}}\n	</a>\n	</li>\n{{/rows}}\n</ul>\n</div>"),
      general: Mustache.compile("<div class=\"row\">\n<ul class=\"breadcrumb\">\n  			<li class=\"active\">General Laws</li>\n</ul>\n<h1>General Laws</h1>\n<ul>\n{{#rowg}}\n	<li>\n	<a class='bodyLink' href='GeneralLaws/Part{{part}}' id=\"GeneralLaws/Part{{part}}\">\n		Part {{part}}\n	</a>\n	</li>\n{{/rowg}}\n</ul>\n</div>")
    };

    return View;

  })(Backbone.View);

  body = new View({
    render: function(loc) {
      var id, opts, type;
      if ('q' in loc) {
        return this.search(loc.q).then(function(resp) {
          console.log(resp);
          resp.q = loc.q;
          body.spin(false);
          return body.$el.html(body.template.search(resp));
        });
      } else if ('newStyleName' in loc) {
        id = "c" + loc.c + "s" + loc.s;
        return db.get(id, function(err, doc) {
          if (err) {
            body.spin(false);
          } else {
            body.spin(false);
            return body.$el.html(body.template.section(doc));
          }
        });
      } else if ('a' in loc) {
        id = "c" + loc.c + "a" + loc.a;
        return db.get(id, function(err, doc) {
          if (err) {
            body.spin(false);
          } else {
            body.spin(false);
            return body.$el.html(body.template.article(doc));
          }
        });
      } else if ('y' in loc) {
        id = "y" + loc.y + "c" + loc.c;
        return db.get(id, function(err, doc) {
          if (err) {
            body.spin(false);
          } else {
            body.spin(false);
            return body.$el.html(body.template.session(doc));
          }
        });
      } else if (loc.type && loc.type === 'session') {
        if (loc.year === 'all') {
          opts = {
            startkey: [loc.type],
            endkey: [loc.type, {}],
            group_level: 2
          };
          return db.query("laws/sessions", opts, function(err, resp) {
            resp.rows = resp.rows.map(function(row) {
              var out;
              out = {};
              out.year = row.key.pop();
              return out;
            });
            body.spin(false);
            return body.$el.html(body.template.sess(resp));
          });
        } else {
          opts = {
            startkey: [loc.type, parseInt(loc.year, 10)],
            endkey: [loc.type, parseInt(loc.year, 10), {}],
            reduce: false,
            include_docs: true
          };
          return db.query("laws/sessions", opts, function(err, resp) {
            resp.rows.sort(function(a, b) {
              return a.doc.chapter - b.doc.chapter;
            });
            resp.year = loc.year;
            body.spin(false);
            return body.$el.html(body.template.year(resp));
          });
        }
      } else if (loc.section !== 'all') {
        id = "c" + loc.chapter + "s" + loc.section;
        return db.get(id, function(err, doc) {
          if (err) {
            body.spin(false);
          } else {
            body.spin(false);
            return body.$el.html(body.template.section(doc));
          }
        });
      } else if (loc.section === 'all' && loc.chapter !== 'all') {
        if (loc.type = 'GeneralLaws') {
          type = 'general';
        } else {
          type = loc.type;
        }
        opts = {
          startkey: [type, loc.part, loc.title, loc.chapter.toString()],
          endkey: [type, loc.part, loc.title, loc.chapter.toString(), {}],
          reduce: false,
          include_docs: true
        };
        return db.query("laws/all", opts, function(err, resp) {
          resp.rows = resp.rows.map(function(item) {
            if (item.doc.section) {
              item.doc.sub = item.doc.section;
              item.doc.shortCode = "s";
              item.doc.longCode = "Section";
            } else if (item.doc.article) {
              item.doc.sub = item.doc.article;
              item.doc.shortCode = "a";
              item.doc.longCode = "Article";
            }
            return item;
          });
          resp.chap = loc.chapter;
          resp.tit = loc.title;
          resp.pat = loc.part;
          body.spin(false);
          return body.$el.html(body.template.chapter(resp));
        });
      } else if (loc.chapter === 'all' && loc.title !== 'all') {
        if (loc.type = 'GeneralLaws') {
          type = 'general';
        } else {
          type = loc.type;
        }
        opts = {
          startkey: [type, loc.part, loc.title],
          endkey: [type, loc.part, loc.title, {}],
          group_level: 4
        };
        return db.query("laws/all", opts, function(err, resp) {
          var rows;
          rows = resp.rows.map(function(row) {
            var out;
            out = {};
            out.chapter = row.key.pop();
            out.title = row.key.pop();
            out.part = row.key.pop();
            return out;
          });
          body.spin(false);
          return body.$el.html(body.template.title({
            row: rows,
            t: loc.title,
            tp: loc.part
          }));
        });
      } else if (loc.title === 'all' && loc.part !== 'all') {
        if (loc.type = 'GeneralLaws') {
          type = 'general';
        } else {
          type = loc.type;
        }
        opts = {
          startkey: [type, loc.part],
          endkey: [type, loc.part, {}],
          group_level: 3
        };
        return db.query("laws/all", opts, function(err, resp) {
          var rows;
          rows = resp.rows.map(function(row) {
            var out;
            out = {};
            out.title = row.key.pop();
            out.part = row.key.pop();
            return out;
          });
          body.spin(false);
          return body.$el.html(body.template.part({
            rowp: rows,
            p: loc.part
          }));
        });
      } else {
        type = 'general';
        opts = {
          startkey: [type],
          endkey: [type, {}],
          group_level: 2
        };
        return db.query("laws/all", opts, function(err, resp) {
          var rows;
          rows = resp.rows.map(function(row) {
            var out;
            out = {};
            out.part = row.key.pop();
            return out;
          });
          body.spin(false);
          return body.$el.html(body.template.general({
            rowg: rows,
            g: true
          }));
        });
      }
    },
    el: $('#mainContent')
  });

  window.body = body;

  Routes = (function(_super) {
    __extends(Routes, _super);

    function Routes() {
      _ref1 = Routes.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Routes.prototype.routes = {
      'c:type': 'nStyle',
      'y:type': 'session',
      'SessionLaw': 'years',
      'SessionLaw/Year:year': 'years',
      ':type': 'roo',
      ':type/Part:part': 'roo',
      ':type/Part:part/Title:title': 'roo',
      ':type/Part:part/Title:title/Chapter:chapter': 'roo',
      ':type/Part:part/Title:title/Chapter:chapter/Section:section': 'roo',
      'q/:query': 'qoo',
      '*spat': 'roo'
    };

    Routes.prototype.roo = function(type, part, title, chapter, section) {
      var parts;
      if (type == null) {
        type = 'home';
      }
      if (part == null) {
        part = 'all';
      }
      if (title == null) {
        title = 'all';
      }
      if (chapter == null) {
        chapter = 'all';
      }
      if (section == null) {
        section = 'all';
      }
      body.spin();
      parts = {
        type: type,
        part: part,
        title: title,
        chapter: chapter,
        section: section
      };
      if (parts.chapter !== 'all') {
        parts.chapter = parseInt(parts.chapter, 10);
      }
      if (parts.section !== 'all') {
        parts.section = parseInt(parts.section, 10);
      }
      return body.render(parts);
    };

    Routes.prototype.qoo = function(query) {
      body.spin();
      return body.render({
        q: query
      });
    };

    Routes.prototype.nStyle = function(path) {
      var parts, split;
      body.spin();
      if (__indexOf.call(path, 's') >= 0) {
        split = path.split('s');
        parts = {
          newStyleName: true,
          c: split[0],
          s: split[1]
        };
        return body.render(parts);
      } else if (__indexOf.call(path, 'a') >= 0) {
        split = path.split('a');
        parts = {
          c: split[0],
          a: split[1]
        };
        return body.render(parts);
      }
    };

    Routes.prototype.session = function(path) {
      var parts, split;
      body.spin();
      if (__indexOf.call(path, 'c') >= 0) {
        split = path.split('c');
        parts = {
          y: split[0],
          c: split[1]
        };
        return body.render(parts);
      }
    };

    Routes.prototype.years = function(year) {
      if (year == null) {
        year = 'all';
      }
      body.spin();
      return body.render({
        type: 'session',
        year: year
      });
    };

    return Routes;

  })(Backbone.Router);

  routes = new Routes;

  /*nav = new View
  	render:(location)->
  		true
  	template:"""
  		<ul>
  		{{#items}}
  		
  		{{/items}}
  		</ul>
  	"""
  	el:$ '#navBar'
  */


  start = function(dbname) {
    db = Pouch("" + location.protocol + "//" + location.host + "//law", function(err, rslt) {
      Backbone.history.start({
        pushState: true,
        hashChange: false
      });
      return window.db = db;
    });
    return $('#searchForm').on('submit', function(e) {
      e.preventDefault();
      return routes.navigate('q/' + $('#searchBox').val(), {
        trigger: true
      });
    });
  };

  start('law');

}).call(this);

/*
//@ sourceMappingURL=script.map
*/
